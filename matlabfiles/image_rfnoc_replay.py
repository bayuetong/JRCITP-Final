# image_rfnoc_replay.py
# This is a DUMMY script. Replace its content with your actual RFNoC/USRP
# code to transmit the image waveform and capture the received signal.

import numpy as np
import os
import scipy.io as sio # To load .mat file

# Define paths (adjust as per your MATLAB script's expectations)
RFNOC_TEST_DIR = os.path.expanduser('~/Desktop/rfnoc_test')
MATLAB_IMAGE_WAVEFORM_PATH = os.path.join(RFNOC_TEST_DIR, 'U1Wave_Image_QPSK50M_200Msps.mat')
OUTPUT_CAPTURE_PATH = os.path.join('/media/ramdisk', 'usrp_replay_capture9999.dat')

print(f"DUMMY: Running image_rfnoc_replay.py. Expecting waveform from: {MATLAB_IMAGE_WAVEFORM_PATH}")

# --- DUMMY LOGIC START ---
# 1. Simulate loading the waveform generated by MATLAB
# In a real scenario, you would load the waveform and send it to the USRP.
try:
    # MATLAB saves complex data. sio.loadmat will load it as a dict.
    # The variable name inside the .mat file is 'WaveImg1'.
    mat_data = sio.loadmat(MATLAB_IMAGE_WAVEFORM_PATH)
    waveform_to_transmit = mat_data['WaveImg1']
    print(f"DUMMY: Loaded dummy waveform of shape {waveform_to_transmit.shape} from MATLAB.")
except FileNotFoundError:
    print(f"DUMMY: Warning: MATLAB waveform file not found at {MATLAB_IMAGE_WAVEFORM_PATH}. Creating dummy waveform.")
    # Create a dummy complex waveform if the file doesn't exist
    waveform_to_transmit = (np.random.randn(1, 1228800) + 1j * np.random.randn(1, 1228800)).astype(np.complex64)
except Exception as e:
    print(f"DUMMY: Error loading MATLAB waveform: {e}. Creating dummy waveform.")
    waveform_to_transmit = (np.random.randn(1, 1228800) + 1j * np.random.randn(1, 1228800)).astype(np.complex64)


# 2. Simulate USRP transmission and capture
# In a real scenario, you would use pyuhd or similar library to:
#   - Configure USRP for TX
#   - Stream waveform_to_transmit
#   - Configure USRP for RX
#   - Capture received samples
# For this dummy, we just create a dummy received signal.
# A simple way to simulate a "received" signal is to add some noise.
# Or, for testing, just copy the transmitted signal directly.
received_signal = waveform_to_transmit + (np.random.randn(*waveform_to_transmit.shape) * 0.1 + 1j * np.random.randn(*waveform_to_transmit.shape) * 0.1).astype(np.complex64)

# 3. Save the captured signal to the expected .dat file
# MATLAB expects interleaved float32 (I, Q, I, Q...).
with open(OUTPUT_CAPTURE_PATH, 'wb') as f:
    # Flatten the complex array and interleave real and imag parts
    interleaved_data = np.empty((received_signal.size * 2,), dtype=np.float32)
    interleaved_data[0::2] = received_signal.real.flatten()
    interleaved_data[1::2] = received_signal.imag.flatten()
    interleaved_data.tofile(f)

print(f"DUMMY: Simulated received image capture saved to: {OUTPUT_CAPTURE_PATH}")
print("DUMMY: image_rfnoc_replay.py finished.")
# --- DUMMY LOGIC END ---
